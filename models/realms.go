// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Realm is an object representing the database table.
type Realm struct {
	ID int `boil:"id" json:"id" toml:"id" yaml:"id"`

	R *realmR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L realmL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RealmColumns = struct {
	ID string
}{
	ID: "id",
}

var RealmTableColumns = struct {
	ID string
}{
	ID: "realms.id",
}

// Generated where

var RealmWhere = struct {
	ID whereHelperint
}{
	ID: whereHelperint{field: "\"realms\".\"id\""},
}

// RealmRels is where relationship names are stored.
var RealmRels = struct {
	Posts string
	Users string
}{
	Posts: "Posts",
	Users: "Users",
}

// realmR is where relationships are stored.
type realmR struct {
	Posts PostSlice `boil:"Posts" json:"Posts" toml:"Posts" yaml:"Posts"`
	Users UserSlice `boil:"Users" json:"Users" toml:"Users" yaml:"Users"`
}

// NewStruct creates a new relationship struct
func (*realmR) NewStruct() *realmR {
	return &realmR{}
}

func (r *realmR) GetPosts() PostSlice {
	if r == nil {
		return nil
	}
	return r.Posts
}

func (r *realmR) GetUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.Users
}

// realmL is where Load methods for each relationship are stored.
type realmL struct{}

var (
	realmAllColumns            = []string{"id"}
	realmColumnsWithoutDefault = []string{}
	realmColumnsWithDefault    = []string{"id"}
	realmPrimaryKeyColumns     = []string{"id"}
	realmGeneratedColumns      = []string{}
)

type (
	// RealmSlice is an alias for a slice of pointers to Realm.
	// This should almost always be used instead of []Realm.
	RealmSlice []*Realm
	// RealmHook is the signature for custom Realm hook methods
	RealmHook func(context.Context, boil.ContextExecutor, *Realm) error

	realmQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	realmType                 = reflect.TypeOf(&Realm{})
	realmMapping              = queries.MakeStructMapping(realmType)
	realmPrimaryKeyMapping, _ = queries.BindMapping(realmType, realmMapping, realmPrimaryKeyColumns)
	realmInsertCacheMut       sync.RWMutex
	realmInsertCache          = make(map[string]insertCache)
	realmUpdateCacheMut       sync.RWMutex
	realmUpdateCache          = make(map[string]updateCache)
	realmUpsertCacheMut       sync.RWMutex
	realmUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var realmAfterSelectHooks []RealmHook

var realmBeforeInsertHooks []RealmHook
var realmAfterInsertHooks []RealmHook

var realmBeforeUpdateHooks []RealmHook
var realmAfterUpdateHooks []RealmHook

var realmBeforeDeleteHooks []RealmHook
var realmAfterDeleteHooks []RealmHook

var realmBeforeUpsertHooks []RealmHook
var realmAfterUpsertHooks []RealmHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Realm) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range realmAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Realm) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range realmBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Realm) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range realmAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Realm) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range realmBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Realm) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range realmAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Realm) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range realmBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Realm) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range realmAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Realm) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range realmBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Realm) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range realmAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRealmHook registers your hook function for all future operations.
func AddRealmHook(hookPoint boil.HookPoint, realmHook RealmHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		realmAfterSelectHooks = append(realmAfterSelectHooks, realmHook)
	case boil.BeforeInsertHook:
		realmBeforeInsertHooks = append(realmBeforeInsertHooks, realmHook)
	case boil.AfterInsertHook:
		realmAfterInsertHooks = append(realmAfterInsertHooks, realmHook)
	case boil.BeforeUpdateHook:
		realmBeforeUpdateHooks = append(realmBeforeUpdateHooks, realmHook)
	case boil.AfterUpdateHook:
		realmAfterUpdateHooks = append(realmAfterUpdateHooks, realmHook)
	case boil.BeforeDeleteHook:
		realmBeforeDeleteHooks = append(realmBeforeDeleteHooks, realmHook)
	case boil.AfterDeleteHook:
		realmAfterDeleteHooks = append(realmAfterDeleteHooks, realmHook)
	case boil.BeforeUpsertHook:
		realmBeforeUpsertHooks = append(realmBeforeUpsertHooks, realmHook)
	case boil.AfterUpsertHook:
		realmAfterUpsertHooks = append(realmAfterUpsertHooks, realmHook)
	}
}

// OneG returns a single realm record from the query using the global executor.
func (q realmQuery) OneG(ctx context.Context) (*Realm, error) {
	return q.One(ctx, boil.GetContextDB())
}

// OneGP returns a single realm record from the query using the global executor, and panics on error.
func (q realmQuery) OneGP(ctx context.Context) *Realm {
	o, err := q.One(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single realm record from the query, and panics on error.
func (q realmQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *Realm {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single realm record from the query.
func (q realmQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Realm, error) {
	o := &Realm{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for realms")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Realm records from the query using the global executor.
func (q realmQuery) AllG(ctx context.Context) (RealmSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// AllGP returns all Realm records from the query using the global executor, and panics on error.
func (q realmQuery) AllGP(ctx context.Context) RealmSlice {
	o, err := q.All(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all Realm records from the query, and panics on error.
func (q realmQuery) AllP(ctx context.Context, exec boil.ContextExecutor) RealmSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Realm records from the query.
func (q realmQuery) All(ctx context.Context, exec boil.ContextExecutor) (RealmSlice, error) {
	var o []*Realm

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Realm slice")
	}

	if len(realmAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Realm records in the query using the global executor
func (q realmQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// CountGP returns the count of all Realm records in the query using the global executor, and panics on error.
func (q realmQuery) CountGP(ctx context.Context) int64 {
	c, err := q.Count(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all Realm records in the query, and panics on error.
func (q realmQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Realm records in the query.
func (q realmQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count realms rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q realmQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q realmQuery) ExistsGP(ctx context.Context) bool {
	e, err := q.Exists(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q realmQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q realmQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if realms exists")
	}

	return count > 0, nil
}

// Posts retrieves all the post's Posts with an executor.
func (o *Realm) Posts(mods ...qm.QueryMod) postQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"posts\".\"realm_id\"=?", o.ID),
	)

	return Posts(queryMods...)
}

// Users retrieves all the user's Users with an executor.
func (o *Realm) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"users\".\"realm_id\"=?", o.ID),
	)

	return Users(queryMods...)
}

// LoadPosts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (realmL) LoadPosts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRealm interface{}, mods queries.Applicator) error {
	var slice []*Realm
	var object *Realm

	if singular {
		var ok bool
		object, ok = maybeRealm.(*Realm)
		if !ok {
			object = new(Realm)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRealm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRealm))
			}
		}
	} else {
		s, ok := maybeRealm.(*[]*Realm)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRealm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRealm))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &realmR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &realmR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`posts`),
		qm.WhereIn(`posts.realm_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load posts")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice posts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on posts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for posts")
	}

	if len(postAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Posts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &postR{}
			}
			foreign.R.Realm = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RealmID) {
				local.R.Posts = append(local.R.Posts, foreign)
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.Realm = local
				break
			}
		}
	}

	return nil
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (realmL) LoadUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRealm interface{}, mods queries.Applicator) error {
	var slice []*Realm
	var object *Realm

	if singular {
		var ok bool
		object, ok = maybeRealm.(*Realm)
		if !ok {
			object = new(Realm)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRealm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRealm))
			}
		}
	} else {
		s, ok := maybeRealm.(*[]*Realm)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRealm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRealm))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &realmR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &realmR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.realm_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.Realm = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RealmID) {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Realm = local
				break
			}
		}
	}

	return nil
}

// AddPostsG adds the given related objects to the existing relationships
// of the realm, optionally inserting them as new records.
// Appends related to o.R.Posts.
// Sets related.R.Realm appropriately.
// Uses the global database handle.
func (o *Realm) AddPostsG(ctx context.Context, insert bool, related ...*Post) error {
	return o.AddPosts(ctx, boil.GetContextDB(), insert, related...)
}

// AddPostsP adds the given related objects to the existing relationships
// of the realm, optionally inserting them as new records.
// Appends related to o.R.Posts.
// Sets related.R.Realm appropriately.
// Panics on error.
func (o *Realm) AddPostsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Post) {
	if err := o.AddPosts(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPostsGP adds the given related objects to the existing relationships
// of the realm, optionally inserting them as new records.
// Appends related to o.R.Posts.
// Sets related.R.Realm appropriately.
// Uses the global database handle and panics on error.
func (o *Realm) AddPostsGP(ctx context.Context, insert bool, related ...*Post) {
	if err := o.AddPosts(ctx, boil.GetContextDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPosts adds the given related objects to the existing relationships
// of the realm, optionally inserting them as new records.
// Appends related to o.R.Posts.
// Sets related.R.Realm appropriately.
func (o *Realm) AddPosts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Post) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RealmID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"posts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"realm_id"}),
				strmangle.WhereClause("\"", "\"", 2, postPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RealmID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &realmR{
			Posts: related,
		}
	} else {
		o.R.Posts = append(o.R.Posts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &postR{
				Realm: o,
			}
		} else {
			rel.R.Realm = o
		}
	}
	return nil
}

// SetPostsG removes all previously related items of the
// realm replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Realm's Posts accordingly.
// Replaces o.R.Posts with related.
// Sets related.R.Realm's Posts accordingly.
// Uses the global database handle.
func (o *Realm) SetPostsG(ctx context.Context, insert bool, related ...*Post) error {
	return o.SetPosts(ctx, boil.GetContextDB(), insert, related...)
}

// SetPostsP removes all previously related items of the
// realm replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Realm's Posts accordingly.
// Replaces o.R.Posts with related.
// Sets related.R.Realm's Posts accordingly.
// Panics on error.
func (o *Realm) SetPostsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Post) {
	if err := o.SetPosts(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPostsGP removes all previously related items of the
// realm replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Realm's Posts accordingly.
// Replaces o.R.Posts with related.
// Sets related.R.Realm's Posts accordingly.
// Uses the global database handle and panics on error.
func (o *Realm) SetPostsGP(ctx context.Context, insert bool, related ...*Post) {
	if err := o.SetPosts(ctx, boil.GetContextDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPosts removes all previously related items of the
// realm replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Realm's Posts accordingly.
// Replaces o.R.Posts with related.
// Sets related.R.Realm's Posts accordingly.
func (o *Realm) SetPosts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Post) error {
	query := "update \"posts\" set \"realm_id\" = null where \"realm_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Posts {
			queries.SetScanner(&rel.RealmID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Realm = nil
		}
		o.R.Posts = nil
	}

	return o.AddPosts(ctx, exec, insert, related...)
}

// RemovePostsG relationships from objects passed in.
// Removes related items from R.Posts (uses pointer comparison, removal does not keep order)
// Sets related.R.Realm.
// Uses the global database handle.
func (o *Realm) RemovePostsG(ctx context.Context, related ...*Post) error {
	return o.RemovePosts(ctx, boil.GetContextDB(), related...)
}

// RemovePostsP relationships from objects passed in.
// Removes related items from R.Posts (uses pointer comparison, removal does not keep order)
// Sets related.R.Realm.
// Panics on error.
func (o *Realm) RemovePostsP(ctx context.Context, exec boil.ContextExecutor, related ...*Post) {
	if err := o.RemovePosts(ctx, exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePostsGP relationships from objects passed in.
// Removes related items from R.Posts (uses pointer comparison, removal does not keep order)
// Sets related.R.Realm.
// Uses the global database handle and panics on error.
func (o *Realm) RemovePostsGP(ctx context.Context, related ...*Post) {
	if err := o.RemovePosts(ctx, boil.GetContextDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePosts relationships from objects passed in.
// Removes related items from R.Posts (uses pointer comparison, removal does not keep order)
// Sets related.R.Realm.
func (o *Realm) RemovePosts(ctx context.Context, exec boil.ContextExecutor, related ...*Post) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RealmID, nil)
		if rel.R != nil {
			rel.R.Realm = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("realm_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Posts {
			if rel != ri {
				continue
			}

			ln := len(o.R.Posts)
			if ln > 1 && i < ln-1 {
				o.R.Posts[i] = o.R.Posts[ln-1]
			}
			o.R.Posts = o.R.Posts[:ln-1]
			break
		}
	}

	return nil
}

// AddUsersG adds the given related objects to the existing relationships
// of the realm, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Realm appropriately.
// Uses the global database handle.
func (o *Realm) AddUsersG(ctx context.Context, insert bool, related ...*User) error {
	return o.AddUsers(ctx, boil.GetContextDB(), insert, related...)
}

// AddUsersP adds the given related objects to the existing relationships
// of the realm, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Realm appropriately.
// Panics on error.
func (o *Realm) AddUsersP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) {
	if err := o.AddUsers(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUsersGP adds the given related objects to the existing relationships
// of the realm, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Realm appropriately.
// Uses the global database handle and panics on error.
func (o *Realm) AddUsersGP(ctx context.Context, insert bool, related ...*User) {
	if err := o.AddUsers(ctx, boil.GetContextDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUsers adds the given related objects to the existing relationships
// of the realm, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Realm appropriately.
func (o *Realm) AddUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RealmID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"realm_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RealmID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &realmR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				Realm: o,
			}
		} else {
			rel.R.Realm = o
		}
	}
	return nil
}

// SetUsersG removes all previously related items of the
// realm replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Realm's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.Realm's Users accordingly.
// Uses the global database handle.
func (o *Realm) SetUsersG(ctx context.Context, insert bool, related ...*User) error {
	return o.SetUsers(ctx, boil.GetContextDB(), insert, related...)
}

// SetUsersP removes all previously related items of the
// realm replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Realm's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.Realm's Users accordingly.
// Panics on error.
func (o *Realm) SetUsersP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) {
	if err := o.SetUsers(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUsersGP removes all previously related items of the
// realm replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Realm's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.Realm's Users accordingly.
// Uses the global database handle and panics on error.
func (o *Realm) SetUsersGP(ctx context.Context, insert bool, related ...*User) {
	if err := o.SetUsers(ctx, boil.GetContextDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUsers removes all previously related items of the
// realm replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Realm's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.Realm's Users accordingly.
func (o *Realm) SetUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "update \"users\" set \"realm_id\" = null where \"realm_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Users {
			queries.SetScanner(&rel.RealmID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Realm = nil
		}
		o.R.Users = nil
	}

	return o.AddUsers(ctx, exec, insert, related...)
}

// RemoveUsersG relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.Realm.
// Uses the global database handle.
func (o *Realm) RemoveUsersG(ctx context.Context, related ...*User) error {
	return o.RemoveUsers(ctx, boil.GetContextDB(), related...)
}

// RemoveUsersP relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.Realm.
// Panics on error.
func (o *Realm) RemoveUsersP(ctx context.Context, exec boil.ContextExecutor, related ...*User) {
	if err := o.RemoveUsers(ctx, exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveUsersGP relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.Realm.
// Uses the global database handle and panics on error.
func (o *Realm) RemoveUsersGP(ctx context.Context, related ...*User) {
	if err := o.RemoveUsers(ctx, boil.GetContextDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveUsers relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.Realm.
func (o *Realm) RemoveUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RealmID, nil)
		if rel.R != nil {
			rel.R.Realm = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("realm_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Users {
			if rel != ri {
				continue
			}

			ln := len(o.R.Users)
			if ln > 1 && i < ln-1 {
				o.R.Users[i] = o.R.Users[ln-1]
			}
			o.R.Users = o.R.Users[:ln-1]
			break
		}
	}

	return nil
}

// Realms retrieves all the records using an executor.
func Realms(mods ...qm.QueryMod) realmQuery {
	mods = append(mods, qm.From("\"realms\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"realms\".*"})
	}

	return realmQuery{q}
}

// FindRealmG retrieves a single record by ID.
func FindRealmG(ctx context.Context, iD int, selectCols ...string) (*Realm, error) {
	return FindRealm(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRealmP retrieves a single record by ID with an executor, and panics on error.
func FindRealmP(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) *Realm {
	retobj, err := FindRealm(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindRealmGP retrieves a single record by ID, and panics on error.
func FindRealmGP(ctx context.Context, iD int, selectCols ...string) *Realm {
	retobj, err := FindRealm(ctx, boil.GetContextDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindRealm retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRealm(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Realm, error) {
	realmObj := &Realm{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"realms\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, realmObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from realms")
	}

	if err = realmObj.doAfterSelectHooks(ctx, exec); err != nil {
		return realmObj, err
	}

	return realmObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Realm) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Realm) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Realm) InsertGP(ctx context.Context, columns boil.Columns) {
	if err := o.Insert(ctx, boil.GetContextDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Realm) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no realms provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(realmColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	realmInsertCacheMut.RLock()
	cache, cached := realmInsertCache[key]
	realmInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			realmAllColumns,
			realmColumnsWithDefault,
			realmColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(realmType, realmMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(realmType, realmMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"realms\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"realms\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into realms")
	}

	if !cached {
		realmInsertCacheMut.Lock()
		realmInsertCache[key] = cache
		realmInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Realm record using the global executor.
// See Update for more documentation.
func (o *Realm) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// UpdateP uses an executor to update the Realm, and panics on error.
// See Update for more documentation.
func (o *Realm) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateGP a single Realm record using the global executor. Panics on error.
// See Update for more documentation.
func (o *Realm) UpdateGP(ctx context.Context, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, boil.GetContextDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the Realm.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Realm) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	realmUpdateCacheMut.RLock()
	cache, cached := realmUpdateCache[key]
	realmUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			realmAllColumns,
			realmPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update realms, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"realms\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, realmPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(realmType, realmMapping, append(wl, realmPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update realms row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for realms")
	}

	if !cached {
		realmUpdateCacheMut.Lock()
		realmUpdateCache[key] = cache
		realmUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q realmQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllG updates all rows with the specified column values.
func (q realmQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (q realmQuery) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q realmQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for realms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for realms")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RealmSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o RealmSlice) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o RealmSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RealmSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), realmPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"realms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, realmPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in realm slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all realm")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Realm) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Realm) UpsertGP(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Realm) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Realm) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no realms provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(realmColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	realmUpsertCacheMut.RLock()
	cache, cached := realmUpsertCache[key]
	realmUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			realmAllColumns,
			realmColumnsWithDefault,
			realmColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			realmAllColumns,
			realmPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert realms, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(realmPrimaryKeyColumns))
			copy(conflict, realmPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"realms\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(realmType, realmMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(realmType, realmMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert realms")
	}

	if !cached {
		realmUpsertCacheMut.Lock()
		realmUpsertCache[key] = cache
		realmUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Realm record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Realm) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// DeleteP deletes a single Realm record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Realm) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteGP deletes a single Realm record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Realm) DeleteGP(ctx context.Context) int64 {
	rowsAff, err := o.Delete(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single Realm record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Realm) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Realm provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), realmPrimaryKeyMapping)
	sql := "DELETE FROM \"realms\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from realms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for realms")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q realmQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q realmQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows, and panics on error.
func (q realmQuery) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := q.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q realmQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no realmQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from realms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for realms")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RealmSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o RealmSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o RealmSlice) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := o.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RealmSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(realmBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), realmPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"realms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, realmPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from realm slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for realms")
	}

	if len(realmAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Realm) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Realm provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Realm) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Realm) ReloadGP(ctx context.Context) {
	if err := o.Reload(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Realm) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRealm(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RealmSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty RealmSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RealmSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RealmSlice) ReloadAllGP(ctx context.Context) {
	if err := o.ReloadAll(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RealmSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RealmSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), realmPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"realms\".* FROM \"realms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, realmPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RealmSlice")
	}

	*o = slice

	return nil
}

// RealmExistsG checks if the Realm row exists.
func RealmExistsG(ctx context.Context, iD int) (bool, error) {
	return RealmExists(ctx, boil.GetContextDB(), iD)
}

// RealmExistsP checks if the Realm row exists. Panics on error.
func RealmExistsP(ctx context.Context, exec boil.ContextExecutor, iD int) bool {
	e, err := RealmExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// RealmExistsGP checks if the Realm row exists. Panics on error.
func RealmExistsGP(ctx context.Context, iD int) bool {
	e, err := RealmExists(ctx, boil.GetContextDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// RealmExists checks if the Realm row exists.
func RealmExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"realms\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if realms exists")
	}

	return exists, nil
}

// Exists checks if the Realm row exists.
func (o *Realm) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RealmExists(ctx, exec, o.ID)
}
